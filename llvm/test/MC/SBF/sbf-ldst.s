# RUN: llvm-mc %s -triple=sbf-solana-solana --mcpu=sbfv2 --show-encoding \
# RUN:     | FileCheck %s --check-prefix=CHECK-ASM-NEW
# RUN: llvm-mc %s -triple=sbf-solana-solana --mcpu=sbfv2 -filetype=obj \
# RUN:     | llvm-objdump -d -r - \
# RUN:     | FileCheck --check-prefix=CHECK-OBJ-NEW %s
# RUN: llvm-mc %s -triple=sbf-solana-solana --mcpu=sbfv2 --show-encoding \
# RUN:     | FileCheck %s --check-prefix=CHECK32-ASM-NEW
# RUN: llvm-mc %s -triple=sbf-solana-solana --mcpu=sbfv2 -filetype=obj \
# RUN:     | llvm-objdump --mattr=+alu32 -d -r - \
# RUN:     | FileCheck --check-prefix=CHECK32-OBJ-NEW %s


# TODO: Test immediate field ranges and some hex immediates.

# CHECK-OBJ-NEW: lddw r7, 0x8000
# CHECK-OBJ-NEW: lddw r0, 0x7f00000000000000
# CHECK-OBJ-NEW: lddw r1, -0x1
# CHECK-OBJ-NEW: lddw r3, 0
# CHECK-OBJ-NEW: 0000000000000030:  R_SBF_64_64        the_symbol
# CHECK-ASM-NEW: encoding: [0x18,0x07,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
# CHECK-ASM-NEW: encoding: [0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f]
# CHECK-ASM-NEW: encoding: [0x18,0x01,0x00,0x00,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff]
# CHECK-ASM-NEW: encoding: [0x18'A',0x03'A',A,A,A,A,A,A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
# CHECK-ASM-NEW: # fixup A - offset: 0, value: the_symbol, kind: FK_SecRel_8
lddw r7, 32768
lddw r0, 9151314442816847872
lddw r1, -1
lddw r3, the_symbol



# CHECK-OBJ-NEW: ldxb r6, [r1 + 0x11]
# CHECK-OBJ-NEW: ldxb r1, [r10 - 0x3]
# CHECK-OBJ-NEW: ldxh r8, [r2 + 0x20]
# CHECK-OBJ-NEW: ldxw r4, [r3 + 0x40]
# CHECK-OBJ-NEW: ldxdw r0, [r4 + 0x80]
# CHECK-ASM-NEW: encoding: [0x71,0x16,0x11,0x00,0x00,0x00,0x00,0x00]
# CHECK-ASM-NEW: encoding: [0x71,0xa1,0xfd,0xff,0x00,0x00,0x00,0x00]
# CHECK-ASM-NEW: encoding: [0x69,0x28,0x20,0x00,0x00,0x00,0x00,0x00]
# CHECK-ASM-NEW: encoding: [0x61,0x34,0x40,0x00,0x00,0x00,0x00,0x00]
# CHECK-ASM-NEW: encoding: [0x79,0x40,0x80,0x00,0x00,0x00,0x00,0x00]
ldxb r6, [r1 + 17]
ldxb r1, [r10 - 3]
ldxh r8, [r2 + 32]
ldxw r4, [r3 + 64]
ldxdw r0, [r4 + 128]



# CHECK32-OBJ-NEW: ldxb w6, [r1 + 0x11]
# CHECK32-OBJ-NEW: ldxb w1, [r10 - 0x3]
# CHECK32-OBJ-NEW: ldxh w8, [r2 + 0x20]
# CHECK32-OBJ-NEW: ldxw w4, [r3 + 0x40]
# CHECK32-ASM-NEW: encoding: [0x71,0x16,0x11,0x00,0x00,0x00,0x00,0x00]
# CHECK32-ASM-NEW: encoding: [0x71,0xa1,0xfd,0xff,0x00,0x00,0x00,0x00]
# CHECK32-ASM-NEW: encoding: [0x69,0x28,0x20,0x00,0x00,0x00,0x00,0x00]
# CHECK32-ASM-NEW: encoding: [0x61,0x34,0x40,0x00,0x00,0x00,0x00,0x00]
ldxb w6, [r1 + 17]
ldxb w1, [r10 - 3]
ldxh w8, [r2 + 32]
ldxw w4, [r3 + 64]



# CHECK-OBJ-NEW: stxb [r1 + 0x11], r6
# CHECK-OBJ-NEW: stxb [r10 - 0x3], r1
# CHECK-OBJ-NEW: stxh [r2 + 0x20], r8
# CHECK-OBJ-NEW: stxw [r3 + 0x40], r4
# CHECK-OBJ-NEW: stxdw [r4 + 0x80], r0
# CHECK-ASM-NEW: encoding: [0x73,0x61,0x11,0x00,0x00,0x00,0x00,0x00]
# CHECK-ASM-NEW: encoding: [0x73,0x1a,0xfd,0xff,0x00,0x00,0x00,0x00]
# CHECK-ASM-NEW: encoding: [0x6b,0x82,0x20,0x00,0x00,0x00,0x00,0x00]
# CHECK-ASM-NEW: encoding: [0x63,0x43,0x40,0x00,0x00,0x00,0x00,0x00]
# CHECK-ASM-NEW: encoding: [0x7b,0x04,0x80,0x00,0x00,0x00,0x00,0x00]
stxb [r1 + 17], r6
stxb [r10 - 3], r1
stxh [r2 + 32], r8
stxw [r3 + 64], r4
stxdw [r4 + 128], r0



# CHECK32-OBJ-NEW: stxb [r1 + 0x11], w6
# CHECK32-OBJ-NEW: stxb [r10 - 0x3], w1
# CHECK32-OBJ-NEW: stxh [r2 + 0x20], w8
# CHECK32-OBJ-NEW: stxw [r3 + 0x40], w4
# CHECK32-ASM-NEW: encoding: [0x73,0x61,0x11,0x00,0x00,0x00,0x00,0x00]
# CHECK32-ASM-NEW: encoding: [0x73,0x1a,0xfd,0xff,0x00,0x00,0x00,0x00]
# CHECK32-ASM-NEW: encoding: [0x6b,0x82,0x20,0x00,0x00,0x00,0x00,0x00]
# CHECK32-ASM-NEW: encoding: [0x63,0x43,0x40,0x00,0x00,0x00,0x00,0x00]
stxb [r1 + 17], w6
stxb [r10 - 3], w1
stxh [r2 + 32], w8
stxw [r3 + 64], w4
